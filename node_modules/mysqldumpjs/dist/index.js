"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var fs = require("fs");
var path = require("path");
var dotenv = require("dotenv");
var stream_1 = require("stream");
dotenv.config();
var FlagsMap = new Map([
    ["noData", "--no-data"],
    ["where", "-w"],
    ["compact", "--compact"],
    ["addDropDatabase", "--add-drop-database"],
    ["addDropTable", "--add-drop-table"],
    ["withRoutines", "--routines"],
]);
var DEFAULTS = {
    host: "localhost",
    port: 13306,
    user: "root",
};
var MySQLDump = /** @class */ (function () {
    function MySQLDump(options) {
        this.options = options;
        this.removeExtraFields = function (item) { return item !== "TABLE" && item !== "TABLEOBJ"; };
        this.options = __assign(__assign({}, DEFAULTS), this.options);
    }
    MySQLDump.prototype.doBackup = function (saveAs) {
        return __awaiter(this, void 0, void 0, function () {
            var MYSQL_DUMP, commands, tableStrings, tableObjects, tableStringsCommand, spawnArray, dbDump, result, fullPath, wstream;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.options.dbName || !this.options.password) {
                            return [2 /*return*/, new Error("Please set database name, password")];
                        }
                        MYSQL_DUMP = "mysqldump";
                        commands = __spreadArrays([
                            "-u",
                            this.options.user,
                            "-p" + this.options.password,
                            this.options.dbName,
                            "TABLE",
                            "TABLEOBJ"
                        ], Object.entries(this.options.flags || {})
                            .filter(function (_a) {
                            var key = _a[0];
                            return key !== "tables";
                        })
                            .map(function (_a) {
                            var key = _a[0], value = _a[1];
                            return (value ? FlagsMap.get(key) : "");
                        })
                            .filter(function (item) { return item; })).filter(function (item) { return item; });
                        tableStrings = [];
                        tableObjects = [];
                        this.options.flags &&
                            this.options.flags.tables.forEach(function (t) {
                                if (typeof t === "string") {
                                    tableStrings.push(t);
                                }
                                else if (typeof t !== "string" && !t.where) {
                                    tableStrings.push(t.table);
                                }
                                else {
                                    tableObjects.push(t);
                                }
                            });
                        tableStringsCommand = this.replaceItem("TABLE", commands, tableStrings).filter(this.removeExtraFields);
                        spawnArray = [];
                        if (tableStrings.length > 0) {
                            spawnArray.push(this.spawnAsPromised(child_process_1.spawn(MYSQL_DUMP, __spreadArrays(tableStringsCommand))));
                        }
                        else {
                            spawnArray.push(this.spawnAsPromised(child_process_1.spawn(MYSQL_DUMP, __spreadArrays(commands.filter(this.removeExtraFields)))));
                        }
                        tableObjects.forEach(function (tableObject) {
                            var newCommand = _this.replaceItem("TABLEOBJ", commands, [
                                tableObject.table,
                                FlagsMap.get("where"),
                                "" + tableObject.where,
                            ]).filter(_this.removeExtraFields);
                            spawnArray.push(_this.spawnAsPromised(child_process_1.spawn(MYSQL_DUMP, __spreadArrays(newCommand))));
                        });
                        dbDump = Promise.all(spawnArray);
                        return [4 /*yield*/, dbDump];
                    case 1:
                        result = _a.sent();
                        fullPath = path.join(__dirname, "..", "dump");
                        if (!fs.existsSync(fullPath)) {
                            fs.mkdirSync(fullPath, { recursive: true });
                        }
                        wstream = fs.createWriteStream(path.join(fullPath, saveAs + ".sql"));
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                var readable = stream_1.Readable.from(result);
                                readable.pipe(wstream);
                                wstream.on("finish", resolve);
                                wstream.on("error", reject);
                            })];
                }
            });
        });
    };
    MySQLDump.prototype.spawnAsPromised = function (childProcess) {
        return new Promise(function (resolve, reject) {
            var stdout = "", stderr = "";
            childProcess.stdout.on("data", function (chunk) {
                stdout += chunk;
            });
            childProcess.stderr.on("data", function (chunk) {
                stderr += chunk;
            });
            childProcess.on("error", reject).on("close", function (code) {
                if (code === 0) {
                    resolve(stdout);
                }
                else {
                    reject(stderr);
                }
            });
        });
    };
    MySQLDump.prototype.replaceItem = function (item, array, newArray) {
        var itemIndex = array.indexOf(item);
        return (__spreadArrays(array.slice(0, itemIndex), array.slice(itemIndex), newArray) ||
            []);
    };
    return MySQLDump;
}());
exports.MySQLDump = MySQLDump;
//# sourceMappingURL=index.js.map